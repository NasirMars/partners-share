import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FixedLocator, ScalarFormatter
import numpy as np
from datetime import datetime

def plot_cumulative_gain(data_str, start_date, end_date, initial_fund=0.0):
    """
    Plot cumulative gain over a specified date range, including an initial fund.

    Parameters:
    - data_str (str): String containing the data with Date/Time and Realized P/L.
    - start_date (datetime.date): Start date for the plot.
    - end_date (datetime.date): End date for the plot.
    - initial_fund (float): Initial fund to add to cumulative values (default: 0.0).
    """
    # Validate date range
    if start_date > end_date:
        raise ValueError("start_date must be before or equal to end_date")

    # Parse the data
    lines = data_str.strip().split('\n')[1:]  # Skip header
    data = []
    for line in lines:
        parts = line.split()  # Splits on whitespace, collapses multiples
        if len(parts) == 3:
            dt_part1 = parts[0].rstrip(',')  # Remove trailing comma from date
            dt = dt_part1 + ' ' + parts[1]   # Combine date and time
            try:
                money_change = float(parts[2])
                data.append({'timestamp': dt, 'money_change': money_change})
            except ValueError:
                print(f"Skipping line with invalid P/L value: {line}")
                continue
        else:
            print(f"Skipping invalid line format: {line}")
            continue

    # Create a DataFrame
    df = pd.DataFrame(data)

    # Convert timestamp to datetime and extract date
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['date'] = df['timestamp'].dt.date

    # Aggregate money changes by date
    daily_changes = df.groupby('date')['money_change'].sum().reset_index()

    # Calculate cumulative money change
    daily_changes['cumulative_money_change'] = daily_changes['money_change'].cumsum()

    # Add initial fund to cumulative money change
    daily_changes['cumulative_money_change'] += initial_fund

    # Create a complete date range to ensure a continuous line
    current_date = datetime.today().date()  # Use current date dynamically
    all_dates = pd.date_range(start=df['timestamp'].min().date(), end=max(current_date, end_date), freq='D')
    all_dates_df = pd.DataFrame({'date': [d.date() for d in all_dates]})
    daily_changes = all_dates_df.merge(daily_changes, on='date', how='left')
    daily_changes['money_change'] = daily_changes['money_change'].fillna(0)
    daily_changes['cumulative_money_change'] = daily_changes['cumulative_money_change'].ffill().fillna(initial_fund)

    # Filter data for the specified date range
    filtered_changes = daily_changes[(daily_changes['date'] >= start_date) & (daily_changes['date'] <= end_date)].copy().reset_index(drop=True)

    # Ensure current_date is included if within range
    if start_date <= current_date <= end_date and current_date not in filtered_changes['date'].values:
        last_cumulative = daily_changes.loc[daily_changes['date'] < current_date, 'cumulative_money_change'].iloc[-1] if not daily_changes.loc[daily_changes['date'] < current_date].empty else initial_fund
        new_row = pd.DataFrame([{'date': current_date, 'money_change': 0, 'cumulative_money_change': last_cumulative}])
        filtered_changes = pd.concat([filtered_changes, new_row], ignore_index=True)
        filtered_changes = filtered_changes.sort_values('date').reset_index(drop=True)

    # Verify filtered_changes is not empty
    if filtered_changes.empty:
        raise ValueError("No data available in the specified date range")

    # Plotting
    plt.figure(figsize=(20, 8))
    plt.plot(filtered_changes['date'], filtered_changes['cumulative_money_change'], label='Cumulative Balance (Initial Fund + Gains)', color='blue', linestyle='-', linewidth=2)

    # Find all local peaks (maxima and minima)
    cumulative_array = filtered_changes['cumulative_money_change'].values
    peaks = []
    for i in range(1, len(cumulative_array) - 1):
        if cumulative_array[i] > cumulative_array[i-1] and cumulative_array[i] > cumulative_array[i+1]:
            peaks.append((i, 'max', cumulative_array[i]))
        elif cumulative_array[i] < cumulative_array[i-1] and cumulative_array[i] < cumulative_array[i+1]:
            peaks.append((i, 'min', cumulative_array[i]))

    # Annotate peaks with boxes
    for idx, peak_type, value in peaks:
        date = filtered_changes['date'].iloc[idx]
        text = f'{value:.2f}'
        if peak_type == 'max':
            plt.annotate(
                text,
                xy=(date, value),
                xytext=(0, 10),
                textcoords='offset points',
                ha='center',
                va='bottom',
                bbox=dict(boxstyle='round,pad=0.3', fc='lightblue', ec='blue', alpha=0.8),
                fontsize=10
            )
        else:  # min
            plt.annotate(
                text,
                xy=(date, value),
                xytext=(0, -10),
                textcoords='offset points',
                ha='center',
                va='top',
                bbox=dict(boxstyle='round,pad=0.3', fc='lightblue', ec='blue', alpha=0.8),
                fontsize=10
            )

    # Annotate current value as of today with a box (if within range)
    current_idx = filtered_changes.index[filtered_changes['date'] == current_date].tolist()
    if current_idx and start_date <= current_date <= end_date:
        current_value = filtered_changes['cumulative_money_change'].iloc[current_idx[0]]
        plt.annotate(
            f'Current: {current_value:.2f} (Today)',
            xy=(current_date, current_value),
            xytext=(0, 20),
            textcoords='offset points',
            ha='center',
            va='bottom',
            bbox=dict(boxstyle='round,pad=0.3', fc='lightgreen', ec='green', alpha=0.8),
            fontsize=10
        )
    else:
        # Annotate the last value in the range
        last_date = filtered_changes['date'].iloc[-1]
        last_value = filtered_changes['cumulative_money_change'].iloc[-1]
        plt.annotate(
            f'End: {last_value:.2f}',
            xy=(last_date, last_value),
            xytext=(0, 20),
            textcoords='offset points',
            ha='center',
            va='bottom',
            bbox=dict(boxstyle='round,pad=0.3', fc='lightgreen', ec='green', alpha=0.8),
            fontsize=10
        )
        current_value = last_value  # For printing

    # Y-axis: Set range from 0 to the highest value
    max_change = np.ceil(max(cumulative_array) / 1000) * 1000
    tick_step = 1000 if (max_change - 0) > 5000 else 500
    y_ticks = np.arange(0, max_change + tick_step, tick_step)
    plt.ylim(0, max_change)
    plt.gca().yaxis.set_major_locator(FixedLocator(y_ticks))
    plt.gca().yaxis.set_major_formatter(ScalarFormatter())

    # Add grid (major and minor)
    plt.grid(True, which="major", ls="-", alpha=0.7)
    plt.grid(True, which="minor", ls="--", alpha=0.3)
    plt.minorticks_on()

    # Finalize plot
    plt.xlabel('Date')
    plt.ylabel('Cumulative Balance ($)')
    plt.title(f'Cumulative Balance Over Time ({start_date} to {end_date}, Initial Fund: ${initial_fund:.2f})')
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()

    # Show the plot
    plt.show()

    # Calculate total cumulated gain and loss (excluding initial fund)
    total_gain = df[df['money_change'] > 0]['money_change'].sum()
    total_loss = df[df['money_change'] < 0]['money_change'].sum()

    # Print results
    print(f"Current Value: ${current_value:.2f} on {end_date}")
    print(f"Initial Fund: ${initial_fund:.2f}")
    print(f"Cumulated Gain: ${total_gain:.2f}")
    print(f"Cumulated Loss: ${total_loss:.2f}")
    print("Peak Values:")
    for idx, peak_type, value in peaks:
        date = filtered_changes['date'].iloc[idx]
        print(f"  {peak_type.capitalize()} Peak: ${value:.2f} on {date}")

# Example usage with the provided date range and initial fund
data_str = """Date/Time Realized P/L
2024-11-04, 9:34:29 -92.620208
2024-11-04, 10:07:06    7.218853
2024-11-04, 11:53:35    -0.881161
2024-11-04, 12:04:23    -2.485457
2024-11-04, 12:20:20    -4.58519
2024-11-04, 13:08:07    -3.28528
2024-11-04, 14:50:22    -1.785402
2024-11-04, 15:33:51    -4.833676
2024-11-04, 15:51:46    0.139812
2024-11-05, 9:31:12 17.064165
2024-11-05, 10:27:53    8.343757
2024-11-05, 15:11:55    -3.063634
2024-11-06, 13:59:53    12.833975
2024-11-07, 9:34:39 -0.658297
2024-11-08, 14:51:54    -2.118832
2024-11-11, 11:37:34    -3.730352
2024-11-11, 11:42:50    -0.570282
2024-11-11, 12:05:06    -3.621914
2024-11-11, 12:18:32    -2.23997
2024-11-11, 13:03:55    -2.265937
2024-11-11, 13:12:09    -3.050525
2024-11-11, 13:31:11    -2.926042
2024-11-11, 14:44:14    -10.788924
2024-11-12, 9:46:51 -2.949783
2024-11-12, 9:49:28 -0.944072
2024-11-12, 10:49:19    -2.999259
2024-11-12, 13:27:33    -2.643137
2024-11-12, 13:36:22    -4.123303
2024-11-13, 10:04:51    -1.505707
2024-11-13, 11:00:01    1.585154
2024-11-14, 9:34:47 -1.780028
2024-11-14, 9:39:12 -5.994007
2024-11-14, 10:24:52    -59.037709
2024-11-14, 12:39:54    -118.984233
2024-11-15, 9:40:24 7.70839
2024-11-15, 15:46:37    -1.420445
2024-11-15, 15:48:52    -1.366441
2024-11-15, 15:50:48    -1.216403
2024-11-15, 15:52:50    -1.712632
2024-11-18, 9:57:04 -7.840141
2024-11-18, 10:03:55    -0.680244
2024-11-18, 11:11:54    -0.259329
2024-11-18, 11:13:12    -0.009389
2024-11-18, 11:15:33    -0.349012
2024-11-19, 9:30:01 -2.631923
2024-11-19, 9:57:09 -5.867521
2024-11-19, 11:50:07    4.80263
2024-11-20, 9:57:09 -4.397537
2024-11-20, 13:51:07    38.277206
2024-11-21, 9:30:44 201.164158
2024-11-22, 9:30:00 9.479909
2024-11-22, 15:21:34    2.641023
2024-11-25, 9:31:24 64.609777
2024-11-25, 9:55:46 1.102305
2024-11-25, 9:56:46 0.238493
2024-11-25, 10:01:02    1.028942
2024-11-25, 10:04:26    -0.009575
2024-11-25, 10:04:54    0.275554
2024-11-25, 10:05:11    -0.15893
2024-11-25, 10:08:09    -0.011412
2024-11-25, 10:08:44    0.202764
2024-11-25, 10:09:56    -1.595722
2024-11-25, 10:11:07    -0.237206
2024-11-25, 10:11:35    -0.274875
2024-11-25, 10:12:13    0.70636
2024-11-26, 11:38:04    -0.025254
2024-11-26, 14:07:47    -29.222441
2024-11-26, 14:07:55    -22.539909
2024-11-27, 9:34:08 54.807063
2024-11-27, 9:53:29 -32.956612
2024-11-27, 11:41:36    -8.907389
2024-11-29, 9:30:01 -9.023198
2024-11-29, 9:31:06 17.702668
2024-11-29, 9:34:10 16.825322
2024-11-29, 9:36:56 18.954949
2024-11-29, 12:23:33    5.612315
2024-12-03, 9:30:11 -11.725058
2024-12-03, 9:43:41 -12.253153
2024-12-03, 10:12:11    -12.068907
2024-12-04, 9:30:06 -334.669432
2024-12-04, 9:30:16 -140.08942
2024-12-04, 9:37:37 -43.544592
2024-12-04, 9:37:57 -77.348681
2024-12-04, 9:38:17 -131.117021
2024-12-04, 15:59:56    0.578007
2024-12-05, 9:33:45 -28.497679
2024-12-05, 9:48:00 -18.743621
2024-12-05, 9:51:12 -14.34948
2024-12-05, 10:12:05    -30.156691
2024-12-05, 13:05:48    14.595226
2024-12-05, 13:06:35    6.085979
2024-12-06, 9:31:29 -3.485147
2024-12-06, 9:33:15 8.817379
2024-12-06, 9:34:15 1.019653
2024-12-06, 9:34:21 1.869562
2024-12-09, 9:30:03 -3.904925
2024-12-09, 9:31:04 -5.228615
2024-12-09, 9:42:00 -7.583175
2024-12-09, 10:28:59    17.513327
2024-12-10, 9:30:02 -23.302106
2024-12-10, 9:30:08 -33.285501
2024-12-10, 9:37:16 26.597247
2024-12-10, 10:23:28    -7.574143
2024-12-12, 9:30:05 -36.745662
2024-12-12, 9:30:09 -39.612729
2024-12-12, 9:56:27 -28.144237
2024-12-12, 11:23:23    -3.128215
2024-12-12, 11:45:20    -21.455165
2024-12-12, 12:50:37    -38.021082
2024-12-12, 15:55:07    0.804544
2024-12-13, 15:13:29    15.789635
2024-12-16, 9:36:34 17.798748
2024-12-16, 10:05:15    14.18872
2024-12-16, 13:04:58    -14.896571
2024-12-16, 13:34:46    60.638956
2024-12-17, 9:30:00 738.290941
2024-12-17, 9:30:01 179.222596
2024-12-17, 12:56:17    -126.554169
2024-12-18, 9:30:11 -29.064785
2024-12-18, 9:31:01 -11.451051
2024-12-19, 9:30:29 -146.45387
2024-12-19, 9:36:27 257.326006
2024-12-20, 9:30:01 -140.429189
2024-12-20, 15:18:10    -1.569133
2024-12-20, 15:18:10    -1.788714
2024-12-23, 9:30:01 -41.029822
2024-12-23, 9:30:04 -134.175928
2024-12-23, 9:30:15 -78.888472
2024-12-23, 9:30:41 -46.189668
2024-12-23, 9:35:53 11.068866
2024-12-24, 9:30:01 200.522204
2024-12-24, 9:30:06 35.894628
2024-12-24, 9:30:06 -5.280096
2024-12-26, 9:30:04 -3.913425
2024-12-26, 9:30:04 -22.243526
2024-12-26, 9:56:12 15.62132
2024-12-27, 9:30:10 -51.764085
2024-12-27, 9:31:35 114.69905
2024-12-27, 9:38:33 -46.267562
2024-12-27, 9:41:37 86.896342
2024-12-27, 12:52:49 -1.902766
2024-12-30, 9:30:06 -54.809201
2024-12-30, 9:30:10 -70.679046
2024-12-30, 9:32:03 29.306935
2024-12-31, 9:30:33 433.3771
2024-12-31, 9:30:33 214.918302
2025-01-03, 9:30:00 2716.93533
2025-01-03, 9:30:04 643.339776
2025-01-06, 9:30:01 313.117729
2025-01-06, 9:30:02 0.623926
2025-01-06, 9:32:19 -124.903885
2025-01-06, 9:32:24 -395.927846
2025-01-07, 9:32:05 620.577885
2025-01-07, 11:44:58 -1.425935
2025-01-10, 9:30:00 -19.835846
2025-01-10, 9:30:01 -1.01586
2025-01-15, 9:45:04 -145.037707
2025-01-15, 10:28:38 -2.036749
2025-01-15, 10:40:53 -4.77146
2025-01-16, 9:30:06 -208.152028
2025-01-17, 9:30:01 201.274168
2025-01-17, 9:30:06 -39.45181
2025-01-21, 9:30:00 267.778458
2025-01-21, 9:30:00 -47.740614
2025-01-21, 9:30:04 -0.13582
2025-01-22, 9:30:01 -39.702509
2025-01-23, 9:30:10 -58.734465
2025-01-23, 9:30:42 -103.964915
2025-01-24, 9:30:08 -344.931135
2025-01-27, 9:30:22 -778.34763
2025-02-05, 15:56:02 9.50298
2025-02-07, 15:57:21    -84.685206
2025-02-10, 15:19:35    -62.328265
2025-02-11, 9:30:01 802.881289
2025-02-11, 9:30:34 1165.181325
2025-02-12, 9:30:06 254.126828
2025-02-12, 9:30:09 -261.772539
2025-02-12, 9:30:35 54.091518
2025-02-13, 9:30:05 -336.509031
2025-02-13, 9:30:30 -58.946153
2025-02-14, 9:30:02 -647.007931
2025-02-19, 9:30:00 -97.931056
2025-02-19, 9:30:05 -73.630428
2025-02-19, 9:55:20 -66.397373
2025-02-19, 9:57:04 -41.704306
2025-02-20, 9:30:00 -133.53404
2025-02-20, 9:39:29 -141.096707
2025-02-20, 15:50:46 -2.321246
2025-02-20, 15:56:17 -10.743828
2025-02-21, 15:16:20 -30.845451
2025-02-21, 15:30:55 -68.112127
2025-02-21, 15:43:02 31.256445
2025-02-24, 9:30:08 -139.436563
2025-02-24, 9:30:43 -87.768834
2025-03-03, 15:50:52 0.173874
2025-03-04, 9:30:01 -4.494624
2025-03-11, 15:54:15 -17.24645
2025-03-12, 9:30:06 98.115216
2025-03-13, 9:30:01 234.12966
2025-03-14, 9:30:28 -97.853837
2025-03-18, 9:30:32 -83.193645
2025-03-18, 12:37:57 -0.404384
2025-03-18, 12:38:36 -0.013414
2025-03-18, 12:40:50 -0.398179
2025-03-18, 12:48:41 -0.399602
2025-03-18, 12:49:58 -0.016473
2025-03-19, 9:30:02 286.527876
2025-03-19, 9:31:29 106.797235
2025-03-20, 9:30:04 -42.529207
2025-03-21, 9:30:06 -365.955801
2025-03-25, 9:30:05 -297.454948
2025-03-28, 9:30:00 13.298604
2025-03-28, 9:30:01 -276.043898
2025-04-17, 9:30:01 69.418602
2025-04-17, 9:34:00 123.539138
2025-04-21, 9:30:03 12.591525
2025-04-21, 9:30:03 1.667521
2025-04-23, 9:30:00 88.943579
2025-04-23, 9:30:00 70.583125
2025-04-24, 9:30:01 -182.483789
2025-04-24, 10:18:13 -0.010018
2025-04-25, 9:30:00 -54.719082
2025-04-25, 9:30:01 -27.405678
2025-04-28, 10:51:10 -138.602646
2025-04-28, 10:58:09 -67.126766
2025-04-29, 9:30:00 -3.978496
2025-04-29, 9:30:00 -120.938697
2025-05-06, 9:30:00 -334.76271
2025-05-06, 9:30:01 -5.84437
2025-05-07, 9:30:01 -28.53875
2025-05-07, 9:30:01 -146.674776
2025-05-08, 9:30:00 314.609421
2025-05-08, 9:30:03 -57.004096
2025-05-09, 9:30:01 -38.891717
2025-05-12, 9:30:00 2.776591
2025-05-12, 9:30:02 -381.94324
2025-05-12, 10:06:29 -0.520078
2025-05-12, 10:07:07 0.011934
2025-05-13, 9:30:00 31.218888
2025-05-13, 9:30:45 -207.306355
2025-05-14, 9:30:00 -110.948399
2025-05-14, 9:30:01 -395.291884
2025-05-15, 9:30:00 -139.8382
2025-05-16, 9:30:01 -141.436537
2025-05-16, 9:30:01 -144.852409
2025-05-20, 9:30:00 101.202766
2025-05-20, 9:30:00 51.448054
2025-05-21, 9:30:01 286.8809
2025-05-21, 9:30:01 12.599062
2025-05-22, 9:30:00 16.988963
2025-05-22, 9:30:01 -94.48648
2025-05-23, 9:30:01 -100.001484
2025-05-23, 9:33:54 -55.436002
2025-05-27, 9:30:00 3945.771429
2025-05-27, 9:30:00 9.976206
2025-05-28, 9:30:00 77.490864
2025-05-28, 9:30:46 517.97478
2025-05-29, 9:30:01 -18.524393
2025-05-29, 9:30:01 -274.207531
2025-06-02, 9:30:01 7.9764
2025-06-02, 9:34:27 -292.141875
2025-06-03, 9:30:00 -228.488445
2025-06-03, 9:30:00 -321.75947
2025-06-04, 9:30:00 2.186691
2025-06-04, 9:30:00 -177.453071
2025-06-05, 9:30:00 18.636781
2025-06-05, 9:30:01 69.899428
2025-06-06, 9:30:00 -12.65501
2025-06-06, 9:30:01 -40.709323
2025-06-09, 9:30:01 8.095105
2025-06-09, 9:30:02 30.654694
2025-06-10, 9:30:00 788.055264
2025-06-10, 9:30:00 18.640421
2025-06-11, 9:30:00 88.30514
2025-06-12, 9:30:00 -24.309302
2025-06-12, 9:30:00 -25.534561
2025-06-13, 9:30:00 109.566194
2025-06-13, 9:30:01 -28.922163
2025-06-16, 9:30:00 3744.580128
2025-06-16, 9:30:00 38.504232
2025-06-17, 9:30:00 -97.196897
2025-06-17, 9:30:00 -198.528498
2025-06-18, 9:30:00 -23.990124
2025-06-18, 9:30:00 -225.397806
2025-06-20, 9:30:00 -1145.986794
2025-06-20, 9:30:01 -208.281329
2025-06-24, 9:30:00 -4.849923
2025-06-27, 9:30:00 54.284186
2025-06-27, 9:30:01 -169.306437
2025-06-30, 9:30:01 -3.863372
2025-06-30, 9:30:01 -84.586363
2025-07-02, 9:30:00 -5.736500
2025-07-02, 9:30:00 -355.206215
2025-07-03, 9:30:01 814.078360
2025-07-08, 9:30:01 163.925547
2025-07-08, 9:30:11 688.644331
2025-07-09, 9:30:00 69.864101
2025-07-09, 9:30:00 -231.620010
2025-07-10, 9:30:00 -25.457992
2025-07-10, 9:30:01 -82.864397
2025-07-11, 9:30:00 -37.441407
2025-07-11, 9:31:50 155.093195
2025-07-15, 9:30:00 -2.900303
2025-07-15, 9:30:01 12.878010
2025-07-15, 10:10:33 -0.193076
2025-07-17, 9:30:00 -344.058608
2025-07-17, 9:30:01 592.932853
2025-07-18, 9:30:00 15.777397
2025-07-18, 9:30:00 -537.171523
2025-07-21, 9:30:01 459.186601
2025-07-21, 9:30:01 396.694689
2025-07-21, 10:31:11 -0.433894
2025-07-22, 9:30:00 -51.591167
2025-07-22, 9:30:01 154.834109
2025-07-23, 9:30:00 483.458160
2025-07-23, 9:30:00 -26.864915
2025-07-24, 9:30:00 -0.234328
2025-07-24, 9:30:00 642.523436
2025-07-24, 9:30:00 -255.024013
2025-07-28, 9:30:00 588.531452
2025-07-28, 9:30:01 -99.19228
2025-07-29, 9:30:00 148.070691
2025-07-29, 9:30:00 -187.220451
2025-07-30, 9:30:01 -109.541017
2025-07-31, 9:30:00 49.114874
2025-08-01, 9:30:00 -979.609
2025-08-04, 9:30:00 96.63426
2025-08-05, 9:30:00 42.978488
2025-08-05, 9:30:00 47.600229
2025-08-06, 9:30:00 -127.6283
2025-08-06, 9:30:01 162.52926
2025-08-06, 15:31:44 -0.200456
2025-08-07, 9:30:00 -98.94057
2025-08-07, 9:30:00 -26.56307
2025-08-08, 9:30:01 113.360659
2025-08-08, 9:30:00 14.578384
2025-08-11, 09:30:00 2.811758
2025-08-11, 09:30:01 96.942961
2025-08-12, 09:30:01 -423.413161
2025-08-12, 09:30:01 40.123823
2025-08-13, 09:30:00 1215.805577
2025-08-13, 09:30:01 57.628036
2025-08-14, 09:30:00 473.235655
2025-08-14, 09:30:01 -183.664409
2025-08-15, 09:30:00 -16.47742
2025-08-18, 09:30:01 214.18424
2025-08-18, 09:30:02 -433.447649
2025-08-20, 09:30:00 28.942818
2025-08-21, 09:30:00 -325.8143
2025-08-21, 09:30:00 1274.5148
2025-08-22, 09:30:00 -533.5592
2025-08-22, 09:30:00 -2.110998
2025-08-25, 09:30:01 -44.17625
2025-08-25, 09:30:02 411.43667
2025-08-27, 09:30:00 -68.13263
2025-08-27, 09:30:00 603.71277
2025-08-28, 09:30:01 -285.2265
2025-08-28, 09:30:01 -11.36844
2025-09-02, 09:30:00 -531.6533
2025-09-02, 09:30:00 -56.8356
2025-09-04, 09:30:00 -28.64846
2025-09-04, 09:30:00 39.52932
2025-09-05, 09:30:00 -390.9154
2025-09-05, 09:30:00 346.23406
2025-09-08, 09:30:00 366.73524
2025-09-08, 09:30:01 -702.4781
2025-09-12, 09:30:00 -547.7876
2025-09-12, 09:30:00 -52.88882
2025-09-18, 09:30:00 486.22077
2025-09-18, 09:30:01 -363.9416
2025-09-19, 09:30:01 19.526026
2025-09-19, 09:30:01 428.94243
2025-09-23, 09:30:00 -0.131529
2025-09-23, 09:30:00 1447.9416
2025-09-29, 09:30:00 -25.6512
2025-09-29, 09:30:01 -1941.464
"""

# Call the function with a custom date range and initial fund
plot_cumulative_gain(data_str, datetime(2025, 6, 1).date(), datetime(2025, 8, 8).date(), initial_fund=3845.35)
